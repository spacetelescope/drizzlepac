jobs:
- job: ${{ format(parameters.name) }}
  pool:
    ${{ if eq(parameters.os, 'windows') }}:
      vmImage: windows-latest
    ${{ if eq(parameters.os, 'macos') }}:
      vmImage: macOS-10.14
    ${{ if eq(parameters.os, 'linux') }}:
      vmImage: ubuntu-16.04

  strategy:
    matrix:
      Python39:
        python.version: '3.9'
      # Python37:
      #  python.version: '3.7'
      Python38:
        python.version: '3.8'
    maxParallel: 6

  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'

    - bash: |
        export PIP_INSTALL='pip install --upgrade'
        echo "##vso[task.setvariable variable=PIP_INSTALL]$PIP_INSTALL"
      condition: ne( variables['Agent.OS'], 'Windows_NT' )
      displayName: Pip on Linux/Darwin

    - powershell: |
        Set-Variable -Name PIP_INSTALL -Value 'python -m pip install --upgrade'
        Write-Host "##vso[task.setvariable variable=PIP_INSTALL]$PIP_INSTALL"
      condition: eq( variables['Agent.OS'], 'Windows_NT' )
      displayName: Pip on Windows

    - script: |
        $(PIP_INSTALL) pip astropy numpy
      displayName: install dependencies

    - script: |
        $(PIP_INSTALL) -e .[test]
      displayName: build package

    - script: |
        python -m pip freeze
      displayName: freeze output

    # TODO: Clean up doctest and enable --doctest-modules
    - script: |
        pytest -v --junitxml=junit/test-results.xml
      displayName: run test

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Python $(python.version)-${{ format(parameters.name) }}'
